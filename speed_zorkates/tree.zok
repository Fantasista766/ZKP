import "hashes/sha256/512bitPadded" as hash;

// leave the root out of the struct as all the variables 
// in the struct are all private and the root is public
struct MerkleTreeProofStruct<DEPTH> {
  u32[8] leaf;
  u32[DEPTH][8] path;
}

// Merkle-Tree inclusion proof for tree depth <DEPTH> using sha256
def merkleTreeProof<DEPTH>(MerkleTreeProofStruct<DEPTH> proof) -> u32[8] {
    // Start from the leaf
    u32[8] mut digest = proof.leaf;

  // Loop up the tree
    for u32 i in 0..DEPTH {
        (u32[8], u32[8]) s = (digest, proof.path[i]);
        digest = hash(s.0, s.1);
    }

    return digest;
}

const u32 TREE_DEPTH = 2;

def main(private MerkleTreeProofStruct<TREE_DEPTH> proof) -> u32[8] {
    return merkleTreeProof(proof);
}
